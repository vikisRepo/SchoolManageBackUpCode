// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApi.Helpers;

namespace SMS.Migrations.MysqlData
{
    [DbContext(typeof(MysqlDataContext))]
    [Migration("20210917213204_bankseeddata")]
    partial class bankseeddata
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("DependentsStudent", b =>
                {
                    b.Property<int>("DependentsdetailsDependentsId")
                        .HasColumnType("int");

                    b.Property<int>("StudentsStudentId")
                        .HasColumnType("int");

                    b.HasKey("DependentsdetailsDependentsId", "StudentsStudentId");

                    b.HasIndex("StudentsStudentId");

                    b.ToTable("DependentsStudent");
                });

            modelBuilder.Entity("SMS.Models.Academics.LessonPlan", b =>
                {
                    b.Property<int>("LessonPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AcademicClassId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicClassSubjectId")
                        .HasColumnType("int");

                    b.Property<string>("LessonPlanCheckDigi")
                        .HasColumnType("text");

                    b.Property<string>("activity")
                        .HasColumnType("text");

                    b.Property<string>("classActivity")
                        .HasColumnType("text");

                    b.Property<string>("classWork")
                        .HasColumnType("text");

                    b.Property<string>("concept")
                        .HasColumnType("text");

                    b.Property<DateTime?>("date")
                        .HasColumnType("datetime");

                    b.Property<string>("extraInfo")
                        .HasColumnType("text");

                    b.Property<string>("games")
                        .HasColumnType("text");

                    b.Property<string>("homeWork")
                        .HasColumnType("text");

                    b.Property<string>("lesson")
                        .HasColumnType("text");

                    b.Property<string>("topic")
                        .HasColumnType("text");

                    b.HasKey("LessonPlanId");

                    b.ToTable("LessonPlans");
                });

            modelBuilder.Entity("SMS.Models.Bank", b =>
                {
                    b.Property<int>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BankDescr")
                        .HasColumnType("text");

                    b.HasKey("BankId");

                    b.ToTable("Banks");

                    b.HasData(
                        new
                        {
                            BankId = 1,
                            BankDescr = "State Bank of India (SBI)"
                        },
                        new
                        {
                            BankId = 2,
                            BankDescr = "Punjab National Bank"
                        },
                        new
                        {
                            BankId = 3,
                            BankDescr = "Bank of Baroda (With Merger of Dena Bank & Vijaya Bank)"
                        },
                        new
                        {
                            BankId = 4,
                            BankDescr = "Canara Bank (With Merger of Syndicate Bank)"
                        },
                        new
                        {
                            BankId = 5,
                            BankDescr = "Union Bank of India (With Merger of Andhra Bank and Corporation Bank)"
                        },
                        new
                        {
                            BankId = 6,
                            BankDescr = "Indian Bank (With Merger of Allahabad Bank)"
                        },
                        new
                        {
                            BankId = 7,
                            BankDescr = "Central Bank of India"
                        },
                        new
                        {
                            BankId = 8,
                            BankDescr = "UCO Bank"
                        },
                        new
                        {
                            BankId = 9,
                            BankDescr = "Bank of Maharashtra"
                        },
                        new
                        {
                            BankId = 10,
                            BankDescr = "Punjab & Sindh Bank"
                        },
                        new
                        {
                            BankId = 11,
                            BankDescr = "Bandhan Bank"
                        },
                        new
                        {
                            BankId = 12,
                            BankDescr = "Catholic Syrian Bank"
                        },
                        new
                        {
                            BankId = 13,
                            BankDescr = "City Union Bank"
                        },
                        new
                        {
                            BankId = 14,
                            BankDescr = "DCB Bank"
                        },
                        new
                        {
                            BankId = 15,
                            BankDescr = "Dhanlaxmi Bank"
                        },
                        new
                        {
                            BankId = 16,
                            BankDescr = "Federal Bank"
                        },
                        new
                        {
                            BankId = 17,
                            BankDescr = "HDFC Bank"
                        },
                        new
                        {
                            BankId = 18,
                            BankDescr = "ICICI Bank"
                        },
                        new
                        {
                            BankId = 19,
                            BankDescr = "IDBI Bank"
                        },
                        new
                        {
                            BankId = 20,
                            BankDescr = "IDFC First Bank"
                        },
                        new
                        {
                            BankId = 21,
                            BankDescr = "Jammu & Kashmir Bank"
                        },
                        new
                        {
                            BankId = 22,
                            BankDescr = "Karur Vysya Bank"
                        },
                        new
                        {
                            BankId = 23,
                            BankDescr = "Lakshmi Vilas Bank"
                        },
                        new
                        {
                            BankId = 24,
                            BankDescr = "Nainital Bank"
                        },
                        new
                        {
                            BankId = 25,
                            BankDescr = "RBL Bank"
                        },
                        new
                        {
                            BankId = 26,
                            BankDescr = "South Indian Bank"
                        },
                        new
                        {
                            BankId = 27,
                            BankDescr = "Tamilnad Mercantile Bank Limited"
                        },
                        new
                        {
                            BankId = 28,
                            BankDescr = "Axis Bank"
                        },
                        new
                        {
                            BankId = 29,
                            BankDescr = "Kotak Mahindra Bank"
                        },
                        new
                        {
                            BankId = 30,
                            BankDescr = "Bank of India"
                        },
                        new
                        {
                            BankId = 31,
                            BankDescr = "Canara Bank"
                        },
                        new
                        {
                            BankId = 32,
                            BankDescr = "IndusInd Bank"
                        },
                        new
                        {
                            BankId = 33,
                            BankDescr = "YES Bank"
                        },
                        new
                        {
                            BankId = 34,
                            BankDescr = "Karnataka Bank"
                        },
                        new
                        {
                            BankId = 35,
                            BankDescr = "Indian Overseas Bank"
                        },
                        new
                        {
                            BankId = 36,
                            BankDescr = "Union Bank of India (Andhra Bank & Corporation Bank)"
                        });
                });

            modelBuilder.Entity("SMS.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("cityDescr")
                        .HasColumnType("text");

                    b.HasKey("CityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("SMS.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("countryDescr")
                        .HasColumnType("text");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("SMS.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("text");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("SMS.Models.Dependents", b =>
                {
                    b.Property<int>("DependentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AadharNumber")
                        .HasColumnType("text");

                    b.Property<long>("AnnualIncome")
                        .HasColumnType("bigint");

                    b.Property<bool>("BvEmployee")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Company")
                        .HasColumnType("text");

                    b.Property<string>("Designation")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<long>("MobileNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("Occupation")
                        .HasColumnType("text");

                    b.Property<string>("SalutationId")
                        .HasColumnType("text");

                    b.HasKey("DependentsId");

                    b.ToTable("Dependents");
                });

            modelBuilder.Entity("SMS.Models.Designation", b =>
                {
                    b.Property<int>("DesignationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DesignationName")
                        .HasColumnType("text");

                    b.HasKey("DesignationId");

                    b.ToTable("Designations");
                });

            modelBuilder.Entity("SMS.Models.Education", b =>
                {
                    b.Property<int>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("eduDescr")
                        .HasColumnType("text");

                    b.HasKey("EducationId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("SMS.Models.Inventory.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<int>("InventoryItemTypeId")
                        .HasColumnType("int");

                    b.Property<int>("InventoryItemUsageAreaId")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .HasColumnType("text");

                    b.Property<int>("ModelNumber")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("VendorAddress")
                        .HasColumnType("text");

                    b.Property<string>("VendorName")
                        .HasColumnType("text");

                    b.Property<string>("VendorNumber")
                        .HasColumnType("text");

                    b.Property<bool>("WarrenOrGarantee")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("WarrenOrGarenInfo")
                        .HasColumnType("text");

                    b.HasKey("InventoryId");

                    b.HasIndex("InventoryItemTypeId");

                    b.HasIndex("InventoryItemUsageAreaId");

                    b.ToTable("Inventorys");
                });

            modelBuilder.Entity("SMS.Models.Inventory.InventoryDefect", b =>
                {
                    b.Property<int>("InventoryDefectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DefectInfo")
                        .HasColumnType("text");

                    b.Property<int?>("InventoryItemTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("InventoryItemUsageAreaId")
                        .HasColumnType("int");

                    b.HasKey("InventoryDefectId");

                    b.HasIndex("InventoryItemTypeId");

                    b.HasIndex("InventoryItemUsageAreaId");

                    b.ToTable("InventoryDefects");
                });

            modelBuilder.Entity("SMS.Models.Inventory.InventoryItemType", b =>
                {
                    b.Property<int>("InventoryItemTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("InventoryItemTypeId");

                    b.ToTable("InventoryItemTypes");
                });

            modelBuilder.Entity("SMS.Models.Inventory.InventoryItemUsageArea", b =>
                {
                    b.Property<int>("InventoryItemUsageAreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("InventoryItemUsageAreaId");

                    b.ToTable("InventoryItemUsageAreas");
                });

            modelBuilder.Entity("SMS.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("LanguageDescription")
                        .HasColumnType("text");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("SMS.Models.Leave.StaffLeave", b =>
                {
                    b.Property<int>("StaffLeaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("LeaveType")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<DateTime>("datefrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("dateto")
                        .HasColumnType("datetime");

                    b.Property<string>("leavesession")
                        .HasColumnType("text");

                    b.HasKey("StaffLeaveId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffLeaves");
                });

            modelBuilder.Entity("SMS.Models.Leave.StudentLeave", b =>
                {
                    b.Property<int>("StudentLeaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("LeaveType")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("datefrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("dateto")
                        .HasColumnType("datetime");

                    b.Property<string>("leavesession")
                        .HasColumnType("text");

                    b.HasKey("StudentLeaveId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentLeaves");
                });

            modelBuilder.Entity("SMS.Models.Nationality", b =>
                {
                    b.Property<int>("NationalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NationalityName")
                        .HasColumnType("text");

                    b.HasKey("NationalityId");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("SMS.Models.Religion", b =>
                {
                    b.Property<int>("ReligionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ReligionName")
                        .HasColumnType("text");

                    b.HasKey("ReligionId");

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("SMS.Models.ReportingTo", b =>
                {
                    b.Property<int>("ReportingToId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ReportingDescr")
                        .HasColumnType("text");

                    b.HasKey("ReportingToId");

                    b.ToTable("ReportingTos");
                });

            modelBuilder.Entity("SMS.Models.SchoolName", b =>
                {
                    b.Property<int>("SchoolNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("SchoolDescr")
                        .HasColumnType("text");

                    b.HasKey("SchoolNameId");

                    b.ToTable("SchoolNames");
                });

            modelBuilder.Entity("SMS.Models.Setup.AcademicClass", b =>
                {
                    b.Property<int>("AcademicClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AcademicClassSubjectId")
                        .HasColumnType("text");

                    b.Property<DateTime>("AcademicYear")
                        .HasColumnType("datetime");

                    b.Property<string>("ClassName")
                        .HasColumnType("text");

                    b.Property<string>("Group")
                        .HasColumnType("text");

                    b.Property<string>("Section")
                        .HasColumnType("text");

                    b.HasKey("AcademicClassId");

                    b.ToTable("AcademicClasses");
                });

            modelBuilder.Entity("SMS.Models.Setup.AcademicClassSubject", b =>
                {
                    b.Property<int>("AcademicClassSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AcademicClassId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.HasKey("AcademicClassSubjectId");

                    b.ToTable("AcademicClassSubjects");
                });

            modelBuilder.Entity("SMS.Models.Setup.Subject", b =>
                {
                    b.Property<int>("SubjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("SubjectDescr")
                        .HasColumnType("text");

                    b.HasKey("SubjectID");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("SMS.Models.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<string>("AadharNumber")
                        .HasColumnType("text");

                    b.Property<int>("ActiveId")
                        .HasColumnType("int");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("text");

                    b.Property<string>("BankBranch")
                        .HasColumnType("text");

                    b.Property<string>("BankIfscCode")
                        .HasColumnType("text");

                    b.Property<string>("BankName")
                        .HasColumnType("text");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("text");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("DesignationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime");

                    b.Property<int>("EducationId")
                        .HasColumnType("int");

                    b.Property<string>("EmailId")
                        .HasColumnType("text");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeementStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Epfnumber")
                        .HasColumnType("text");

                    b.Property<string>("Esinumber")
                        .HasColumnType("text");

                    b.Property<string>("FatherMobileNumber")
                        .HasColumnType("text");

                    b.Property<string>("FatherName")
                        .HasColumnType("text");

                    b.Property<string>("FatherOccupation")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("datetime");

                    b.Property<int>("LanguagesId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Marritalsatus")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<long>("Mobile")
                        .HasColumnType("bigint");

                    b.Property<string>("MotherMobileNumber")
                        .HasColumnType("text");

                    b.Property<string>("MotherName")
                        .HasColumnType("text");

                    b.Property<string>("MotherOccupation")
                        .HasColumnType("text");

                    b.Property<int>("MotherTongue")
                        .HasColumnType("int");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.Property<string>("OfficialEmailId")
                        .HasColumnType("text");

                    b.Property<string>("PanNumber")
                        .HasColumnType("text");

                    b.Property<int>("ReligionId")
                        .HasColumnType("int");

                    b.Property<int>("ReportingTo")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SalutationId")
                        .HasColumnType("text");

                    b.Property<string>("SpouseMobileNumber")
                        .HasColumnType("text");

                    b.Property<string>("SpouseName")
                        .HasColumnType("text");

                    b.Property<string>("SpouseOccupation")
                        .HasColumnType("text");

                    b.Property<int>("StaffAddressId")
                        .HasColumnType("int");

                    b.Property<int>("StaffExperienceId")
                        .HasColumnType("int");

                    b.Property<int>("StaffTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TeacherId")
                        .HasColumnType("text");

                    b.Property<string>("Uannumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("WeddingDate")
                        .HasColumnType("datetime");

                    b.Property<string>("branchnumber")
                        .HasColumnType("text");

                    b.Property<string>("maritalStatus")
                        .HasColumnType("text");

                    b.HasKey("StaffId");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("SMS.Models.StaffAddress", b =>
                {
                    b.Property<int>("StaffAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("Line1")
                        .HasColumnType("text");

                    b.Property<string>("Line2")
                        .HasColumnType("text");

                    b.Property<string>("Line3")
                        .HasColumnType("text");

                    b.Property<string>("Pincode")
                        .HasColumnType("text");

                    b.Property<string>("Sate")
                        .HasColumnType("text");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("StaffAddressId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffAddress");
                });

            modelBuilder.Entity("SMS.Models.StaffExperience", b =>
                {
                    b.Property<int>("StaffExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("From")
                        .HasColumnType("datetime");

                    b.Property<string>("Responsibilty")
                        .HasColumnType("text");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime");

                    b.HasKey("StaffExperienceId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffExperience");
                });

            modelBuilder.Entity("SMS.Models.StaffType", b =>
                {
                    b.Property<int>("StaffTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("StaffTypeId");

                    b.ToTable("StaffTypes");
                });

            modelBuilder.Entity("SMS.Models.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("stateDescr")
                        .HasColumnType("text");

                    b.HasKey("StateId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("SMS.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("AadharNumber")
                        .HasColumnType("text");

                    b.Property<int>("AcademicPrecentage")
                        .HasColumnType("int");

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime");

                    b.Property<int>("AdmissionNumber")
                        .HasColumnType("int");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("text");

                    b.Property<string>("Class")
                        .HasColumnType("text");

                    b.Property<int>("DependentsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailId")
                        .HasColumnType("text");

                    b.Property<string>("EmisNumber")
                        .HasColumnType("text");

                    b.Property<string>("FirstLanguage")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<long>("Mobile")
                        .HasColumnType("bigint");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("int");

                    b.Property<string>("ReasonForLeaving")
                        .HasColumnType("text");

                    b.Property<int?>("ReligionId")
                        .HasColumnType("int");

                    b.Property<string>("RollNo")
                        .HasColumnType("text");

                    b.Property<string>("Salutation")
                        .HasColumnType("text");

                    b.Property<string>("SecondLanguage")
                        .HasColumnType("text");

                    b.Property<string>("Section")
                        .HasColumnType("text");

                    b.Property<int>("StudentAddressId")
                        .HasColumnType("int");

                    b.Property<int?>("passingOutSchool")
                        .HasColumnType("int");

                    b.Property<int?>("schoolBrand")
                        .HasColumnType("int");

                    b.Property<string>("schoolName")
                        .HasColumnType("text");

                    b.Property<int?>("yearofattendence")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SMS.Models.StudentAddress", b =>
                {
                    b.Property<int>("StudentAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("Line1")
                        .HasColumnType("text");

                    b.Property<string>("Line2")
                        .HasColumnType("text");

                    b.Property<string>("Line3")
                        .HasColumnType("text");

                    b.Property<string>("Pincode")
                        .HasColumnType("text");

                    b.Property<string>("Sate")
                        .HasColumnType("text");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("StudentAddressId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAddress");
                });

            modelBuilder.Entity("SMS.Models.TimeTable.ClassTimeTable", b =>
                {
                    b.Property<int>("ClassTimeTableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Class")
                        .HasColumnType("text");

                    b.Property<string>("Section")
                        .HasColumnType("text");

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime");

                    b.HasKey("ClassTimeTableId");

                    b.ToTable("ClassTimeTables");
                });

            modelBuilder.Entity("SMS.Models.TimeTable.PeriodDetail", b =>
                {
                    b.Property<int>("PeriodDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClassTimeTableId")
                        .HasColumnType("int");

                    b.Property<string>("Day")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.HasKey("PeriodDetailId");

                    b.HasIndex("ClassTimeTableId");

                    b.HasIndex("StaffId");

                    b.HasIndex("SubjectID");

                    b.ToTable("PeriodDetails");
                });

            modelBuilder.Entity("SMS.Models.Transport.BusTrip", b =>
                {
                    b.Property<int>("BusTripid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("BusesAndDriverId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TotalHeadCount")
                        .HasColumnType("int");

                    b.Property<string>("TripAreas")
                        .HasColumnType("text");

                    b.Property<int>("TripNumber")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("TripTimingFrom")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("TripTimingTo")
                        .HasColumnType("time");

                    b.HasKey("BusTripid");

                    b.HasIndex("BusesAndDriverId");

                    b.HasIndex("StudentId");

                    b.ToTable("BusTrips");
                });

            modelBuilder.Entity("SMS.Models.Transport.BusType", b =>
                {
                    b.Property<int>("BusTypeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BusTypeDesc")
                        .HasColumnType("text");

                    b.HasKey("BusTypeid");

                    b.ToTable("BusTypes");
                });

            modelBuilder.Entity("SMS.Models.Transport.BusesAndDriver", b =>
                {
                    b.Property<int>("BusesAndDriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BusNumber")
                        .HasColumnType("text");

                    b.Property<int>("BusTypeid")
                        .HasColumnType("int");

                    b.Property<string>("DriverAadhar")
                        .HasColumnType("text");

                    b.Property<string>("DriverName")
                        .HasColumnType("text");

                    b.Property<int>("DriverNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsuranceEndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InsurancePolicyNum")
                        .HasColumnType("text");

                    b.Property<int>("NotificationSpanId")
                        .HasColumnType("int");

                    b.Property<int>("SeatCount")
                        .HasColumnType("int");

                    b.Property<string>("company")
                        .HasColumnType("text");

                    b.HasKey("BusesAndDriverId");

                    b.HasIndex("BusTypeid");

                    b.HasIndex("NotificationSpanId");

                    b.ToTable("BusesAndDrivers");
                });

            modelBuilder.Entity("SMS.Models.Transport.NotificationSpan", b =>
                {
                    b.Property<int>("NotificationSpanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NotificationSpanDesc")
                        .HasColumnType("text");

                    b.HasKey("NotificationSpanId");

                    b.ToTable("NotificationSpans");
                });

            modelBuilder.Entity("WebApi.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AcceptTerms")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PasswordReset")
                        .HasColumnType("datetime");

                    b.Property<string>("ResetToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Verified")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("DependentsStudent", b =>
                {
                    b.HasOne("SMS.Models.Dependents", null)
                        .WithMany()
                        .HasForeignKey("DependentsdetailsDependentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMS.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SMS.Models.Inventory.Inventory", b =>
                {
                    b.HasOne("SMS.Models.Inventory.InventoryItemType", "InventoryItemType")
                        .WithMany()
                        .HasForeignKey("InventoryItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMS.Models.Inventory.InventoryItemUsageArea", "InventoryItemUsageArea")
                        .WithMany()
                        .HasForeignKey("InventoryItemUsageAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InventoryItemType");

                    b.Navigation("InventoryItemUsageArea");
                });

            modelBuilder.Entity("SMS.Models.Inventory.InventoryDefect", b =>
                {
                    b.HasOne("SMS.Models.Inventory.InventoryItemType", "InventoryItemType")
                        .WithMany()
                        .HasForeignKey("InventoryItemTypeId");

                    b.HasOne("SMS.Models.Inventory.InventoryItemUsageArea", "InventoryItemUsageArea")
                        .WithMany()
                        .HasForeignKey("InventoryItemUsageAreaId");

                    b.Navigation("InventoryItemType");

                    b.Navigation("InventoryItemUsageArea");
                });

            modelBuilder.Entity("SMS.Models.Leave.StaffLeave", b =>
                {
                    b.HasOne("SMS.Models.Staff", "Staffs")
                        .WithMany()
                        .HasForeignKey("StaffId");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("SMS.Models.Leave.StudentLeave", b =>
                {
                    b.HasOne("SMS.Models.Student", "Students")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("SMS.Models.StaffAddress", b =>
                {
                    b.HasOne("SMS.Models.Staff", null)
                        .WithMany("Addresses")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SMS.Models.StaffExperience", b =>
                {
                    b.HasOne("SMS.Models.Staff", null)
                        .WithMany("StaffExperiences")
                        .HasForeignKey("StaffId");
                });

            modelBuilder.Entity("SMS.Models.StudentAddress", b =>
                {
                    b.HasOne("SMS.Models.Student", null)
                        .WithMany("Addresses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SMS.Models.TimeTable.PeriodDetail", b =>
                {
                    b.HasOne("SMS.Models.TimeTable.ClassTimeTable", "ClassTimeTable")
                        .WithMany("PeriodDetails")
                        .HasForeignKey("ClassTimeTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMS.Models.Staff", "Staffs")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMS.Models.Setup.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassTimeTable");

                    b.Navigation("Staffs");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SMS.Models.Transport.BusTrip", b =>
                {
                    b.HasOne("SMS.Models.Transport.BusesAndDriver", "BusesAndDrivers")
                        .WithMany()
                        .HasForeignKey("BusesAndDriverId");

                    b.HasOne("SMS.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("BusesAndDrivers");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SMS.Models.Transport.BusesAndDriver", b =>
                {
                    b.HasOne("SMS.Models.Transport.BusType", "BusType")
                        .WithMany()
                        .HasForeignKey("BusTypeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMS.Models.Transport.NotificationSpan", "NotificationSpan")
                        .WithMany()
                        .HasForeignKey("NotificationSpanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusType");

                    b.Navigation("NotificationSpan");
                });

            modelBuilder.Entity("WebApi.Entities.Account", b =>
                {
                    b.OwnsMany("WebApi.Entities.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<int>("AccountId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Created")
                                .HasColumnType("datetime");

                            b1.Property<string>("CreatedByIp")
                                .HasColumnType("text");

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("datetime");

                            b1.Property<string>("ReplacedByToken")
                                .HasColumnType("text");

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("datetime");

                            b1.Property<string>("RevokedByIp")
                                .HasColumnType("text");

                            b1.Property<string>("Token")
                                .HasColumnType("text");

                            b1.HasKey("Id");

                            b1.HasIndex("AccountId");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner("Account")
                                .HasForeignKey("AccountId");

                            b1.Navigation("Account");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("SMS.Models.Staff", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("StaffExperiences");
                });

            modelBuilder.Entity("SMS.Models.Student", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("SMS.Models.TimeTable.ClassTimeTable", b =>
                {
                    b.Navigation("PeriodDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
